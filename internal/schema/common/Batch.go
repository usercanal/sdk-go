// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Standard batch structure for all data types
/// This is the top-level container that wraps all schema-specific data
/// Field IDs ensure forward compatibility and allow optimal field ordering
type Batch struct {
	_tab flatbuffers.Table
}

func GetRootAsBatch(buf []byte, offset flatbuffers.UOffsetT) *Batch {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Batch{}
	x.Init(buf, n+offset)
	return x
}

func FinishBatchBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsBatch(buf []byte, offset flatbuffers.UOffsetT) *Batch {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Batch{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedBatchBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Batch) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Batch) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Batch) ApiKey(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Batch) ApiKeyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Batch) ApiKeyBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Batch) MutateApiKey(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Batch) BatchId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Batch) MutateBatchId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *Batch) SchemaType() SchemaType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return SchemaType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Batch) MutateSchemaType(n SchemaType) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func (rcv *Batch) Data(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Batch) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Batch) DataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Batch) MutateData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func BatchStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func BatchAddApiKey(builder *flatbuffers.Builder, apiKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(apiKey), 0)
}
func BatchStartApiKeyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func BatchAddBatchId(builder *flatbuffers.Builder, batchId uint64) {
	builder.PrependUint64Slot(1, batchId, 0)
}
func BatchAddSchemaType(builder *flatbuffers.Builder, schemaType SchemaType) {
	builder.PrependByteSlot(2, byte(schemaType), 0)
}
func BatchAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(data), 0)
}
func BatchStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func BatchEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
