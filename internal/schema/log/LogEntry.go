// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package log

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Single log entry in the system
/// Field IDs allow optimal memory layout and schema evolution
/// Ordered for cache efficiency: larger fields first, smaller fields grouped
type LogEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsLogEntry(buf []byte, offset flatbuffers.UOffsetT) *LogEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LogEntry{}
	x.Init(buf, n+offset)
	return x
}

func FinishLogEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsLogEntry(buf []byte, offset flatbuffers.UOffsetT) *LogEntry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LogEntry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLogEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *LogEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LogEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LogEntry) ContextId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LogEntry) MutateContextId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *LogEntry) Timestamp() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LogEntry) MutateTimestamp(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *LogEntry) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LogEntry) Service() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LogEntry) Payload(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *LogEntry) PayloadLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *LogEntry) PayloadBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LogEntry) MutatePayload(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *LogEntry) EventType() LogEventType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return LogEventType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *LogEntry) MutateEventType(n LogEventType) bool {
	return rcv._tab.MutateByteSlot(14, byte(n))
}

func (rcv *LogEntry) Level() LogLevel {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return LogLevel(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *LogEntry) MutateLevel(n LogLevel) bool {
	return rcv._tab.MutateByteSlot(16, byte(n))
}

func LogEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func LogEntryAddContextId(builder *flatbuffers.Builder, contextId uint64) {
	builder.PrependUint64Slot(0, contextId, 0)
}
func LogEntryAddTimestamp(builder *flatbuffers.Builder, timestamp uint64) {
	builder.PrependUint64Slot(1, timestamp, 0)
}
func LogEntryAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(source), 0)
}
func LogEntryAddService(builder *flatbuffers.Builder, service flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(service), 0)
}
func LogEntryAddPayload(builder *flatbuffers.Builder, payload flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(payload), 0)
}
func LogEntryStartPayloadVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func LogEntryAddEventType(builder *flatbuffers.Builder, eventType LogEventType) {
	builder.PrependByteSlot(5, byte(eventType), 0)
}
func LogEntryAddLevel(builder *flatbuffers.Builder, level LogLevel) {
	builder.PrependByteSlot(6, byte(level), 0)
}
func LogEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
